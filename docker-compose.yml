services:
  backend:
    build: 
      context: ./back
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    # image: ${DOCKER_USERNAME:-yourname}/glowapp-backend:${IMAGE_TAG:-latest}
    container_name: glowapp-backend
    # env_file:
    #   - ./back/.env
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://glowuser:glowpassword@postgres:5432/glowdb
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - glowapp-net
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  telegram-bot:
    build: 
      context: ./back
      dockerfile: Dockerfile.telegram
    container_name: glowapp-telegram-bot
    restart: unless-stopped
    env_file:
      - ./back/.env
    environment:
      - DATABASE_URL=postgresql://glowuser:glowpassword@postgres:5432/glowdb
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DOCKER_ENV=true
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - glowapp-net
    # No ports exposed - bot only needs internal network access

  frontend:
    build: 
      context: ./front
      args:
        # VITE_CLERK_PUBLISHABLE_KEY: pk_test_ZXhhY3QtbGl6YXJkLTUxLmNsZXJrLmFjY291bnRzLmRldiQ
        # VITE_API_URL: http://localhost:8000 

        VITE_CLERK_PUBLISHABLE_KEY: pk_live_Y2xlcmsub3lsYW4ubWUk
        VITE_API_URL: https://oylan.me

    container_name: glowapp-frontend
    depends_on:
      - backend
    networks:
      - glowapp-net
    ports:
      - 127.0.0.1:4173:4173

  postgres:
    image: postgres:15
    container_name: glowapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: glowdb
      POSTGRES_USER: glowuser
      POSTGRES_PASSWORD: glowpassword
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - glowapp-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U glowuser -d glowdb"]
      interval: 10s
      timeout: 5s
      retries: 5

 # nginx:
   # image: nginx:alpine
   # container_name: glowapp-nginx
   # restart: unless-stopped
   # ports:
     # - "80:80"
    #  - "443:443"
   # volumes:
     # - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
     # - ./certs/oylan.me.crt:/etc/ssl/oylan.me.crt:ro
     # - ./certs/oylan.me.key:/etc/ssl/oylan.me.key:ro
    #  - ./certs/ca-bundle.crt:/etc/ssl/ca-bundle.crt:ro
   # depends_on:
  #    - frontend
 #     - backend
#   networks:
#      - glowapp-net

networks:
  glowapp-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
