name: Continuous Deployment

env:
  # Change this if you prefer ghcr.io or another registry
  REGISTRY: docker.io
  IMAGE_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub (or registry)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./back
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/glowapp-backend:${{ github.sha }}

      - name: Build & Push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/glowapp-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Deploy to production over SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          # Prefer an SSH private key stored as a secret
          key: ${{ secrets.SSH_KEY }}
          # Optional: set port if not default 22
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            echo "Pulling new images..."
            docker login ${{ env.REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            cd ${{ secrets.REMOTE_APP_PATH }}
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            export IMAGE_TAG=${{ github.sha }}
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f

      - name: Notify success
        if: success()
        run: echo "Deployment completed successfully." 